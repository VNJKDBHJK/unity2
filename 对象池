# 对象池

------

1. 设置预制体

   > 在预制体中添加 SpriteRenderer
   >
   > <img src="C:\Users\李禹佳\AppData\Roaming\Typora\typora-user-images\image-20230226133000431.png" alt="image-20230226133000431" style="zoom: 80%;" />
   >
   > 给预制体添加脚本,在这里命名为ShadowScript
   >
   > 1. 用OnEnable来代替Start获取组件赋初值 [关于OnEnable与Start](C:\Users\李禹佳\Desktop\unity笔记\函数.md())
   >
   >    获取使用对象和预制体的SpriteRenderer,使预制体的SpriteRenderer与使用对象一致
   >
   >    保持transform值一致
   >
   > ```c#
   >     private Transform player;
   >     private SpriteRenderer sr;
   >     private SpriteRenderer playerSprite;
   >     private Color color;
   > 
   >     [Header("时间控制参数")]
   >     public float activeTime;//显示时间
   >     public float activeStart;//开始显示的时间点
   > 
   >     [Header("不透明度控制")]
   >     private float alpha;
   >     public float alphaset;//初始值
   >     public float alphamultiplier;//alpha变化的乘机(小于1)
   > 
   >     private void OnEnable()//生成残影
   >     {
   >         //获取组件
   >         player = GameObject.FindGameObjectWithTag("Player").transform;
   >         sr = GetComponent<SpriteRenderer>();
   >         playerSprite = player.GetComponent<SpriteRenderer>();
   > 
   >         alpha = alphaset;
   >         activeStart = Time.time;
   > 
   >         //将该物体于保持物体保持一致
   >         sr.sprite = playerSprite.sprite;
   >         transform.position = player.position;
   >         transform.localScale = player.localScale;
   >         transform.rotation = player.rotation;
   > 
   >     }
   > ```
   >
   > 2. 在Update中添加
   >
   >    改变预制体颜色
   >
   >    调用ShadowPool.Instance.ReturnPool(this .gameObject);
   >
   >    ```c#
   >     void Update()
   >        {
   >            alpha *= alphamultiplier;
   >            color = new Color(0.8f, 0.8f, 0.8f, alpha);
   >            sr.color = color;
   >    
   >            if(Time.time >= activeStart + activeTime)
   >            {
   >                //返回对象池
   >                ShadowPool.Instance.ReturnPool(this .gameObject);
   >            }
   >        }
   >    ```
   >
   >    总代码:
   >
   >    ```c#
   >    using System.Collections;
   >    using System.Collections.Generic;
   >    using UnityEngine;
   >    
   >    public class ShadowScripte : MonoBehaviour
   >    {
   >        private Transform player;
   >        private SpriteRenderer sr;
   >        private SpriteRenderer playerSprite;
   >        private Color color;
   >    
   >        [Header("时间控制参数")]
   >        public float activeTime;//显示时间
   >        public float activeStart;//开始显示的时间点
   >    
   >        [Header("不透明度控制")]
   >        private float alpha;
   >        public float alphaset;//初始值
   >        public float alphamultiplier;
   >    
   >        private void OnEnable()//生成残影
   >        {
   >            player = GameObject.FindGameObjectWithTag("Player").transform;
   >            sr = GetComponent<SpriteRenderer>();
   >            playerSprite = player.GetComponent<SpriteRenderer>();
   >            alpha = alphaset;
   >            activeStart = Time.time;
   >    
   >            //将该物体于保持物体保持一致
   >            sr.sprite = playerSprite.sprite;
   >            transform.position = player.position;
   >            transform.localScale = player.localScale;
   >            transform.rotation = player.rotation;
   >    
   >        }
   >    
   >        void Update()
   >        {
   >            alpha *= alphamultiplier;
   >            color = new Color(0.8f, 0.8f, 0.8f, alpha);
   >            sr.color = color;
   >    
   >            if(Time.time >= activeStart + activeTime)
   >            {
   >                //返回对象池
   >                ShadowPool.Instance.ReturnPool(this .gameObject);
   >            }
   >        }
   >    }
   >    ```
   >
   >    将脚本放入预制体中,在场景中删除该预制体,拖入文件中
   >
   >    在预制体中添加参数:
   >
   >    1. activeTime 每个预制体的显示时间
   >
   >    2. activeStart 开始显示的时间点
   >
   >    3. alphaset 不透明度的初始值
   >
   >    4. alphamultiplier 不透明度的变化(<=1)越接近于1 变化的越慢
   >
   >    建议数据:
   >
   >    <img src="C:\Users\李禹佳\AppData\Roaming\Typora\typora-user-images\image-20230226134628456.png" alt="image-20230226134628456" style="zoom:80%;" />

2. 创建对象池

   > 创建物体,命名为ShadowPool
   >
   > <img src="C:\Users\李禹佳\AppData\Roaming\Typora\typora-user-images\image-20230226134234774.png" alt="image-20230226134234774" style="zoom:80%;" />
   >
   > 对该物体添加脚本,命名为ShadowPool
   >
   > 1. 将该脚本设置为单例,创建队列
   >
   >    ```c#
   >        public static ShadowPool Instance;
   >        public GameObject shadowProfeb;
   >        public int shadowCount;
   >    
   >        private Queue<GameObject> availableObjects = new Queue<GameObject>();//创建队列
   >        private void Awake()
   >        {
   >            Instance = this;
   >            //初始化对象池
   >            FillPool();
   >        }
   >    ```
   >
   > 
   >
   > 2. 初始化对象池,填充池子,生成预制体
   >
   >    ```c#
   >        public void FillPool()
   >        {
   >            for(int i = 0; i < shadowCount; i++)
   >            {
   >                var newShadow = Instantiate(shadowProfeb);//生成预制体
   >                newShadow.transform.SetParent(transform);//将生成的预制体放在shadowPool子集里,设置父对象
   >    
   >                //取消启用,返回对象池
   >                ReturnPool(newShadow);
   >            }
   >        }
   >    ```
   >
   > 
   >
   > 3. 取消启用,返回对象池
   >
   >    ```c#
   >        public void ReturnPool(GameObject gameObject)
   >        {
   >            gameObject.SetActive(false);//取消启用
   >    
   >            availableObjects.Enqueue(gameObject);//生成添加到队列末端
   >        }
   >    ```
   >
   > 4. 获得预制体并启用
   >
   >    ```c#
   >        public GameObject GetFromPool()
   >        {
   >            if (availableObjects.Count == 0)//当数量清零后重新填满池子
   >            {
   >                FillPool();
   >            }
   >            var outShdow = availableObjects.Dequeue();//从队列开头获得预制体
   >    
   >            outShdow.SetActive(true);//启用
   >    
   >            return outShdow;//返回至预制体
   >        }
   >    ```
   >
   >    总代码:
   >
   >    ```c#
   >    using System.Collections;
   >    using System.Collections.Generic;
   >    using UnityEngine;
   >    
   >    public class ShadowPool : MonoBehaviour
   >    {
   >        public static ShadowPool Instance;
   >        public GameObject shadowProfeb;
   >        public int shadowCount;
   >    
   >        private Queue<GameObject> availableObjects = new Queue<GameObject>();//创建队列
   >        private void Awake()
   >        {
   >            Instance = this;
   >            //初始化对象池
   >            FillPool();
   >        }
   >        public void FillPool()
   >        {
   >            for(int i = 0; i < shadowCount; i++)
   >            {
   >                var newShadow = Instantiate(shadowProfeb);//生成预制体
   >                newShadow.transform.SetParent(transform);//将生成的预制体放在shadowPool子集里
   >    
   >                //取消启用,返回对象池
   >                ReturnPool(newShadow);
   >            }
   >        }
   >        public void ReturnPool(GameObject gameObject)
   >        {
   >            gameObject.SetActive(false);//取消启用
   >    
   >            availableObjects.Enqueue(gameObject);//生成添加到队列末端
   >        }
   >    
   >        public GameObject GetFromPool()
   >        {
   >            if (availableObjects.Count == 0)
   >            {
   >                FillPool();
   >            }
   >            var outShdow = availableObjects.Dequeue();//从队列开头获得预制体
   >    
   >            outShdow.SetActive(true);
   >    
   >            return outShdow;
   >        }
   >    }
   >    ```
   >
   >    将该脚本挂在ShadowPool下,将预制体和数量填入
   >
   >    建议数据：
   >
   >    <img src="C:\Users\李禹佳\AppData\Roaming\Typora\typora-user-images\image-20230226135654906.png" alt="image-20230226135654906" style="zoom:80%;" />

3. 改写使用对象移动脚本(Player)

   >1. 添加参数
   >
   > ```c#
   >    [Header("参数")]
   >    public float dashtime;//总时长
   >    private float dashTimeLeft;//冲锋剩余时间
   >    private float LastDash=-10f;//上一次冲锋时间点
   >    public float dashPoolDown;
   >    public float dashSpeed;//冲刺时速度
   >    bool isDashing;
   > ```
   >
   >2. 按下特殊按键时，启用冲刺
   >
   > ```c#
   >   void Update()
   >     {
   >         Movement();//移动函数，这里不用管
   >
   >         //冲刺
   >         if (Input.GetKeyDown(KeyCode.J))//也可以在输入设置中改写
   >         {
   >             if (Time.time >= (LastDash + dashPoolDown))//准备期
   >             {
   >                 //执行dash
   >                 ReddyToDash();
   >             }
   >         }
   >
   >         CDimage.fillAmount -= 1.0f / dashPoolDown * Time.deltaTime;//冷却时间，这里不用管
   >     }
   > ```
   >
   >3. 冷却时间，准备期
   >
   > ```c#
   >   void ReddyToDash()
   >     {
   >         isDashing = true;
   >
   >         dashTimeLeft = dashtime;//进入下一波
   >
   >         LastDash = Time.time；//更新上一次冲锋点的时间
   >
   >         CDimage.fillAmount = 1;//cd进入冷却，这里先不用管
   >     }
   > ```
   >
   >4. 调用冲锋
   >
   > ```c#
   >private void FixedUpdate()
   >    {
   >        Dash();
   >        if (isDashing)
   >        {
   >            return;
   >        }
   >    }
   > ```
   >
   >5. 冲锋
   >
   > ```c#
   >     void Dash()
   >     {
   >         if (isDashing)
   >         {
   >             if (dashTimeLeft > 0)//过了冷却时间
   >             {
   >                 rb.velocity = new Vector2(dashSpeed * Horizontalmove, rb.velocity.y);//更新速度
   >
   >                 dashTimeLeft -= Time.deltaTime;//更新冲锋时间
   >
   >                 ShadowPool.Instance.GetFromPool();调用对象池
   >             }
   >             if (dashTimeLeft <= 0)//跳出该函数
   >             {
   >                 isDashing = false;
   >             }
   >         }
   >     }
   > ```
   >
   > 总代码：
   >
   > ```c#
   > using System.Collections;
   > using System.Collections.Generic;
   > using UnityEngine;
   > using UnityEngine.UI;
   >
   > public class person : MonoBehaviour
   > {
   >     public int health;
   >     public float speed;
   >     private float Horizontalmove;
   >     private float FaceDirection;
   >/*无关
   >     Rigidbody2D rb;
   >     Animator anim;
   >     Collider2D coll;
   >
   >     [Header("CD的UI组件")]
   >     public Image CDimage;
   >*/
   >     [Header("参数")]
   >     public float dashtime;//总时长
   >     private float dashTimeLeft;//冲锋剩余时间
   >     private float LastDash=-10f;//上一次冲锋时间点
   >     public float dashPoolDown;
   >     public float dashSpeed;
   >     bool isDashing;
   >/*无关
   >     void Start()
   >     {
   >         rb = GetComponent<Rigidbody2D>();
   >         anim = GetComponent<Animator>();
   >         coll = GetComponent<Collider2D>();
   >     }
   >*/
   >     void Update()
   >     {
   >         Movement();
   >
   >         //冲刺
   >         if (Input.GetKeyDown(KeyCode.J))
   >         {
   >             if (Time.time >= (LastDash + dashPoolDown))
   >             {
   >                 //执行dash
   >                 ReddyToDash();
   >             }
   >         }
   >
   >         CDimage.fillAmount -= 1.0f / dashPoolDown * Time.deltaTime;//冷却时间
   >     }
   >     private void FixedUpdate()
   >     {
   >         Dash();
   >         if (isDashing)
   >         {
   >             return;
   >         }
   >     }
   >     /*无关
   >     void  Movement()
   >     {
   >         Horizontalmove = Input.GetAxis("Horizontal");
   >         FaceDirection = Input.GetAxisRaw("Horizontal");
   >         if (Horizontalmove != 0)
   >         {
   >             rb.velocity = new Vector2(Horizontalmove * speed*Time.fixedDeltaTime  , rb.velocity.y);
   >         }
   >         anim.SetFloat("run", Mathf.Abs(FaceDirection));
   >         if (FaceDirection != 0)
   >         {
   >             transform.localScale = new Vector3(FaceDirection, 1, 1);
   >         }
   >     }
   >     */
   >     void ReddyToDash()
   >     {
   >         isDashing = true;
   >
   >         dashTimeLeft = dashtime;
   >
   >         LastDash = Time.time;
   >
   >         CDimage.fillAmount = 1;//cd进入冷却
   >     }
   >     void Dash()
   >     {
   >         if (isDashing)
   >         {
   >             if (dashTimeLeft > 0)
   >             {
   >                 rb.velocity = new Vector2(dashSpeed * Horizontalmove, rb.velocity.y);
   >
   >                 dashTimeLeft -= Time.deltaTime;
   >
   >                 ShadowPool.Instance.GetFromPool();
   >             }
   >             if (dashTimeLeft <= 0)
   >             {
   >                 isDashing = false;
   >             }
   >         }
   >     }
   > }
   > ```
   >
   >添加参数：
   >
   >1. dashtime 总冲刺时长
   >
   >2. dashPoolDown 冷却时间
   >
   >3. dashSpeed 冲刺速度
   >
   >建议数据：
   >
   ><img src="C:\Users\李禹佳\AppData\Roaming\Typora\typora-user-images\image-20230226141556389.png" alt="image-20230226141556389" style="zoom:80%;" />

4. 设置游戏UI

   > 1. 添加image,底层为角色原图像，上层为UI变化图象
   >
   >    <img src="C:\Users\李禹佳\AppData\Roaming\Typora\typora-user-images\image-20230226142013945.png" alt="image-20230226142013945" style="zoom: 67%;" />
   >
   >    设置位置（底层）：（推荐使用以下位置）
   >
   >    <img src="C:\Users\李禹佳\AppData\Roaming\Typora\typora-user-images\image-20230226142117806.png" alt="image-20230226142117806" style="zoom: 80%;" />
   >
   >    添加图片：
   >
   >    <img src="C:\Users\李禹佳\AppData\Roaming\Typora\typora-user-images\image-20230226142224526.png" alt="image-20230226142224526" style="zoom: 80%;" />
   >
   > 2. 顶层：
   >
   >    <img src="C:\Users\李禹佳\AppData\Roaming\Typora\typora-user-images\image-20230226142552300.png" alt="image-20230226142552300" style="zoom:80%;" />
   >
   > 3. 在角色移动脚本中设置ui变化
   >
   >    ```c#
   >        [Header("CD的UI组件")]
   >        public Image CDimage;
   >    ```
   >
   >    ```c#
   >       void Update()
   >        {
   >        /*无关
   >            Movement();
   >    
   >            //冲刺
   >            if (Input.GetKeyDown(KeyCode.J))
   >            {
   >                if (Time.time >= (LastDash + dashPoolDown))
   >                {
   >                    //执行dash
   >                    ReddyToDash();
   >                }
   >            }
   >    */
   >            CDimage.fillAmount -= 1.0f / dashPoolDown * Time.deltaTime;//冷却时间
   >        }
   >    ```
   >
   >    ```c#
   >    void ReddyToDash()
   >        {
   >        /*无关
   >            isDashing = true;
   >    
   >            dashTimeLeft = dashtime;
   >    
   >            LastDash = Time.time;
   >    */
   >            CDimage.fillAmount = 1;//cd进入冷却
   >        }
   >    ```
   >
   >    总代码放在上面了。
   >
   > 4. 将游戏对象image添加进去（为顶层image)
   >
   >    <img src="C:\Users\李禹佳\AppData\Roaming\Typora\typora-user-images\image-20230226143138011.png" alt="image-20230226143138011" style="zoom:80%;" />
   >
   > 5. 再添加顶层图像时可以添加UISprite或者原图像（开始时填充总数为0）
   >
   >    效果-UISprite
   >
   >    <img src="C:\Users\李禹佳\AppData\Roaming\Typora\typora-user-images\image-20230226143442345.png" alt="image-20230226143442345" style="zoom:50%;" />
   >
   >    效果-原图像
   >
   >    <img src="C:\Users\李禹佳\AppData\Roaming\Typora\typora-user-images\image-20230226143531105.png" alt="image-20230226143531105" style="zoom:50%;" />
   >
   >    觉得原图像好一点

